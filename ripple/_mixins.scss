//
// Copyright 2016 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@import "../animation/functions";
@import "../animation/variables";
@import "../base/mixins";
@import "../feature-targeting/functions";
@import "../feature-targeting/mixins";
@import "../theme/mixins";
@import "../theme/variables";
@import "./functions";
@import "./keyframes";
@import "./variables";

@mixin rs-ripple-core-styles() {
  // postcss-bem-linter: define ripple-surface
  .rs-ripple-surface {
    @include rs-ripple-surface;
    @include rs-states;
    @include rs-ripple-radius-bounded;

    position: relative;
    outline: none;
    overflow: hidden;

    &[data-rs-ripple-is-unbounded] {
      @include rs-ripple-radius-unbounded;

      overflow: visible;
    }

    &--primary {
      @include rs-states(primary);
    }

    &--accent {
      @include rs-states(secondary);
    }
  }

  // postcss-bem-linter: end
}

@mixin rs-ripple-common() {
  // Ensure that styles needed by any component using MDC Ripple are emitted, but only once.
  // (Every component using MDC Ripple imports these mixins, but doesn't necessarily import
  // rs-ripple.scss.)
  @include rs-base-emit-once("rs-ripple/common/animation") {
    @include rs-ripple-keyframes_;
  }

  @include rs-base-emit-once("rs-ripple/common/structure") {
    // Styles used to detect buggy behavior of CSS custom properties in Edge.
    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
    // This is included in _mixins.scss rather than rs-ripple.scss so that it will be
    // present for other components which rely on ripple as well as rs-ripple itself.
    .rs-ripple-surface--test-edge-var-bug {
      --rs-ripple-surface-test-edge-var: 1px solid #000;

      visibility: hidden;

      &::before {
        border: var(--rs-ripple-surface-test-edge-var);
      }
    }
  }
}

@mixin rs-ripple-surface() {
  --rs-ripple-fg-size: 0;
  --rs-ripple-left: 0;
  --rs-ripple-top: 0;
  --rs-ripple-fg-scale: 1;
  --rs-ripple-fg-translate-end: 0;
  --rs-ripple-fg-translate-start: 0;

  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;

  &::before,
  &::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
  }

  &::before {
    transition:
      opacity $rs-states-wash-duration linear,
      background-color $rs-states-wash-duration linear;

    z-index: 1; // Ensure that the ripple wash for hover/focus states is displayed on top of positioned child elements
  }

  &.rs-ripple-upgraded::before {
    transform: scale(var(--rs-ripple-fg-scale, 1));
  }

  &.rs-ripple-upgraded::after {
    top: 0;
    /* @noflip */
    left: 0;
    transform: scale(0);
    transform-origin: center center;
  }

  &.rs-ripple-upgraded--unbounded::after {
    top: var(--rs-ripple-top, 0);
    /* @noflip */
    left: var(--rs-ripple-left, 0);
  }

  &.rs-ripple-upgraded--foreground-activation::after {
    animation:
      rs-ripple-fg-radius-in $rs-ripple-translate-duration forwards,
      rs-ripple-fg-opacity-in $rs-ripple-fade-in-duration forwards;
  }

  &.rs-ripple-upgraded--foreground-deactivation::after {
    animation: rs-ripple-fg-opacity-out $rs-ripple-fade-out-duration;

    // Retain transform from rs-ripple-fg-radius-in activation
    transform: translate(var(--rs-ripple-fg-translate-end, 0)) scale(var(--rs-ripple-fg-scale, 1));
  }
}

@mixin rs-states-base-color($color) {
  @if alpha(rs-theme-prop-value($color)) > 0 {
    $backgroundColor: rs-theme-prop-value($color);
    --rs-ripple_before--background-color: #{$backgroundColor};
    --rs-ripple_after--background-color: #{$backgroundColor};
    --rs-ripple_before--content: '';
    --rs-ripple_after--content: '';
  } @else {
    // If a color with 0 alpha is specified, don't render the ripple pseudo-elements at all.
    // This avoids unnecessary transitions and overflow.
    --rs-ripple_before--content: none;
    --rs-ripple_after--content: none;
  }
}

@mixin rs-states-hover-opacity($opacity) {
  --rs-ripple_hover_before--opacity: #{$opacity};
}

@mixin rs-states-focus-opacity($opacity) {
  --rs-ripple_not-upgraded_focus_before--transition-duration: 75ms;
  --rs-upgraded_-background-focused_before--transition-duration: 75ms;
  --rs-ripple_not-upgraded_focus_before--opacity: #{$opacity};
  --rs-upgraded_-background-focused_before--opacity: #{$opacity};
}

@mixin rs-states-press-opacity($opacity) {
  --rs-ripple_not-upgraded_after--transition: opacity #{$rs-ripple-fade-out-duration} linear;
  --rs-ripple_not-upgraded_active_after--transition-duration: #{$rs-ripple-fade-in-duration};
  --rs-ripple_not-upgraded_active_after--opacity: #{$opacity};
  --rs-ripple-upgraded--rs-ripple-fg-opacity: #{$opacity};
}



// Simple mixin for base states which automatically selects opacity values based on whether the ink color is
// light or dark.
@mixin rs-states($color: rs-theme-prop-value(on-surface)) {
  @include rs-states-interactions_($color, 0);
}

// Simple mixin for activated states which automatically selects opacity values based on whether the ink color is
// light or dark.
@mixin rs-states-activated($color) {
  $activated-opacity: rs-states-opacity($color, activated);
  --rs-activated_before--opacity: #{$activated-opacity};

  @include rs-states-interactions_($color, $activated-opacity);
}


@mixin rs-states-interactions_(
  $color: rs-theme-prop-value(on-surface),
  $opacity-modifier: 0
) {
  @include rs-states-base-color($color);
  @include rs-states-hover-opacity(rs-states-opacity($color, hover) + $opacity-modifier);
  @include rs-states-focus-opacity(rs-states-opacity($color, focus) + $opacity-modifier);
  @include rs-states-press-opacity(rs-states-opacity($color, press) + $opacity-modifier);
}


// Simple mixin for selected states which automatically selects opacity values based on whether the ink color is
// light or dark.
@mixin rs-states-selected($color) {
  $selected-opacity: rs-states-opacity($color, selected);
  --rs-selected_before--opacity: #{$selected-opacity};
  @include rs-states-interactions_($color, $selected-opacity);
}

@mixin rs-ripple-radius-bounded($radius: 100%) {
  &::before,
  &::after {
    top: calc(50% - #{$radius});
    /* @noflip */
    left: calc(50% - #{$radius});
    width: $radius * 2;
    height: $radius * 2;
  }

  &.rs-ripple-upgraded::after {
    width: var(--rs-ripple-fg-size, $radius);
    height: var(--rs-ripple-fg-size, $radius);
  }
}

@mixin rs-ripple-radius-unbounded($radius: 100%) {
  &::before,
  &::after {
    top: calc(50% - #{$radius / 2});
    /* @noflip */
    left: calc(50% - #{$radius / 2});
    width: $radius;
    height: $radius;
  }

  &.rs-ripple-upgraded::before,
  &.rs-ripple-upgraded::after {
    top: var(--rs-ripple-top, calc(50% - #{$radius / 2}));
    /* @noflip */
    left: var(--rs-ripple-left, calc(50% - #{$radius / 2}));
    width: var(--rs-ripple-fg-size, $radius);
    height: var(--rs-ripple-fg-size, $radius);
  }

  &.rs-ripple-upgraded::after {
    width: var(--rs-ripple-fg-size, $radius);
    height: var(--rs-ripple-fg-size, $radius);
  }
}

@mixin rs-states-interactions_(
  $color: rs-theme-prop-value(on-surface),
  $opacity-modifier: 0
) {
  @include rs-states-base-color($color);
  @include rs-states-hover-opacity(rs-states-opacity($color, hover) + $opacity-modifier);
  @include rs-states-focus-opacity(rs-states-opacity($color, focus) + $opacity-modifier);
  @include rs-states-press-opacity(rs-states-opacity($color, press) + $opacity-modifier);
}
