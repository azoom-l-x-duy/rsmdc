@import "@rsmdc/floating-label/rs-functions";
@import "@rsmdc/theme/mixins";
@import "@rsmdc/shape/mixins";
@import "@rsmdc/shape/functions";
@import "@rsmdc/notched-outline/variables";
@import "@rsmdc/rtl/mixins";
@import "./variables";

@mixin rs-states-base-color($color) {
  @if alpha(rs-theme-prop-value($color)) > 0 {
    $background-color: rs-theme-prop-value($color);
    
    .rs-select {
      &::before,
      &::after {
        background-color: $background-color;
        content: '';
      } 
    }
  } @else {

    .rs-select {
      &::before,
      &::after {
        content: none;
      } 
    }
  }
}

@mixin rs-select-type($type) {
  @if $type == outlined {
    @include rs-states-base-color(transparent);

    .rs-select {
      border: none;
      overflow: visible;

      &:not(.-disabled) {
        background-color: transparent;
      }  

      > .label {
        display: none;
      }

      > .outline {
        display: flex;
      }

      > .rs-line-ripple {
        display: none;
      }

      > .nativecontrol,
      > .selectedtext {
        border-bottom: none;
      }
    }
    
    .rs-select {
      &.-disabled {
        background-color: transparent;
    
        > .nativecontrol,
        > .selectedtext {
          border-bottom-style: none;
        }
      }
    }

    .rs-select {
      > .label,
      > .outline > .notch > .label.-outlined {
        line-height: 1.15rem;
        pointer-events: auto;
      }
    
      > .label.-shake,
      > .outline > .notch > .label.-outlined.-shake {
        animation: rs-floating-label-shake-animation(text-field-outlined);
      }
              
      > .nativecontrol,
      > .selectedtext {
        @include rs-rtl-reflexive-property(padding, $rs-select-label-padding, $rs-select-arrow-padding);
    
        display: flex;
        padding-top: 12px;
        padding-bottom: 12px;
        border: none;
        background-color: transparent;
        z-index: 1;
      }
    
      > .selectedtext {
        padding-top: 14px;
      }
    
      > .icon {
        z-index: 2;
      }
    }

  }
}

/* 
.icon {
  @include rs-notched-outline-floating-label-float-position($rs-select-outlined-label-position-y, $rs-select-outlined-with-leading-icon-label-position-x);
}
*/

@mixin rs-select-icon-color($color) {
  .rs-select {
    &.-icon:not(.-disabled) > .icon {
      color: $color;
    }
  }
}

@mixin rs-select-focused-outline-color($color) {
  .rs-select:not(.-disabled).-focused > .outline {
    > .leading,
    > .notch,
    > .trailing {
      opacity: .24;
      border-color: $color;
    }
  }
}

@mixin rs-select-ink-color($color) {
  .rs-select {
    &:not(.-disabled) {
      > .nativecontrol,
      > .selectedtext {
        color: $color;
      }
    }
  }
}

@mixin rs-select-container-fill-color($color) {
  .rs-select {
    &:not(.-disabled) {
      background-color: $color;
    }
  }
}

@mixin rs-select-focused-label-color($color) {
  .rs-select {
    &:not(.-disabled).-focused {
      > .label,
      > .outline > .notch > .label.-outlined {
        color: $color;
      }
    }
  }
}

@mixin rs-select-hover-bottom-line-color($color) {
  .rs-select {
    &:not(.-disabled) > .nativecontrol:hover {
      border-bottom-color: $color;
    }
  }
}

@mixin rs-select-bottom-line-color($color) {
  .rs-select {
    &:not(.-disabled) {
      > .nativecontrol,
      > .selectedtext {
        border-bottom-color: $color;
      }
    }
  }
}

@mixin rs-select-focused-bottom-line-color($color) {
  .rs-select {
    &:not(.-disabled).-focused > .ripple {
      background-color: $color;
    }
  }
}

@mixin rs-select-label-color($color) {
  .rs-select:not(.-disabled) {
    > .label,
    > .outline > .notch > .label.-outlined {
      color: $color;
    }
  }
}

@mixin rs-select-outline-color($color) {

  .rs-select:not(.-disabled) > .outline {
    > .leading,
    > .notch,
    > .trailing {
      opacity: .24;
      border-color: $color;
    }
  }
}

@mixin rs-select-hover-outline-color($color) {
  .rs-select:not(.-disabled):not(.-focused) {
    > .nativecontrol:hover ~,
    > .selectedtext:hover ~ {
      .outline {
        opacity: .24;
        border-color: $color;
      }
    }
  }
}

@mixin rs-select-shape-radius($radius) {
  @if length($radius) > 2 {
    @error "Invalid radius: '#{$radius}' component doesn't allow customizing all corners";
  }
  $masked-radius: rs-shape-mask-radius($radius, 1 1 0 0);
  $calc-radius: rs-shape-resolve-percentage-radius(rs-select-height, $masked-radius);

  .rs-select,
  .rs-select > .nativecontrol {

    border-radius: $calc-radius;
  }
}

@mixin rs-select-outline-shape-radius($radius) {
  $resolved-radius: rs-shape-resolve-percentage-radius($rs-select-height, $radius);
  $calc-radius: rs-shape-prop-value($resolved-radius);
  $leading-radius: rs-shape-mask-radius(rs-shape-prop-value($resolved-radius), 1 0 0 1);
  $trailing-radius: rs-shape-mask-radius(rs-shape-prop-value($resolved-radius), 0 1 1 0);

  .rs-select > .outline {
    > .leading {
      border-radius: $leading-radius;
    }

    > .trailing {
      border-radius: $trailing-radius;
    }

    > .notch > .label.-outlined {
      left: calc( 4px + $calc-radius );
    }
  }

  .rs-select {
    > .nativecontrol {
      border-radius: $calc-radius;
    }  
  }
}


@mixin rs-select-width($width) {
  rs-select {
    --rs-select---width: calc(52px + 16px + $width);
  }
}