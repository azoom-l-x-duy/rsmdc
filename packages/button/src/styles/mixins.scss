@import "@rsmdc/elevation/mixins";
@import "@rsmdc/ripple/mixins-stencil";
@import "./variables";

@mixin rs-button-type($types...) {
  @each $type in $types {
    @if $type == outlined {
      
      .rs-button {
        border: solid 2px $rs-theme-primary;
        
        &.-disabled {
          border-color: $rs-button-disabled-ink-color; 
        }
      
      }
    }@else if $type == raised {
    
      .rs-button {
        box-shadow: rs-elevation(2);
        transition: rs-elevation-transition-value();
        @include rs-ripple-upgraded($rs-theme-on-primary);

        &:hover {
          box-shadow: rs-elevation(4);
        }

        &:active {
          box-shadow: rs-elevation(10);
        }
        
        &:not(.-disabled) {
          background-color: $rs-theme-primary;
          color: $rs-theme-on-primary;
        }
        &.-disabled {
          background: $rs-button-disabled-fill-color;
        }
      }

    } @else if $type == dense {
    
      .rs-button {
        height: $rs-dense-button-height;
        font-size: 0.8125rem;
      }

    }@else if $type == unelevated {
    
      .rs-button {
        @include rs-ripple-upgraded($rs-theme-on-primary);
        
        &:not(.-disabled) {
          background-color: $rs-theme-primary;
          color: $rs-theme-on-primary;
        }
        
        &.-disabled {
          background: $rs-button-disabled-fill-color;
        }
      }

    }@else if $type == fab {
      
      .rs-button {
        --ripple: unbounded;
        min-width: auto;
        width: $rs-fab-height;
        height: $rs-fab-height;
        border-radius: 50%;
        box-shadow: rs-elevation(6);
        transition: rs-elevation-transition-value();
        @include rs-ripple-upgraded($rs-theme-on-secondary);
        
        > .label::before {
          margin: 0;
          width: 24px;
          height: 24px;
          font-size: 24px;
          vertical-align: top;
        }

        > .label::after {
          margin: 0;
          width: 24px;
          height: 24px;
          font-size: 24px;
          vertical-align: top;
        }

        &:hover {
          box-shadow: rs-elevation(8);
        }

        &:active {
          box-shadow: rs-elevation(12);
        }

        &:not(.-disabled) {
          color: $rs-theme-on-secondary;
          background-color: $rs-theme-secondary;
        }
      }
    }
  }
}

@mixin rs-button-position($position) {
  @if $position == center {

    .rs-button {

      &.-fixed {
        left: 50%;
        bottom: 16px;
        transform: translateX(-50%);
      }
    }
  }
}

@mixin rs-button-icon-image($icon, $codepoint: "") {
  $value: if(str-slice("#{$icon}", 1, 4) == "url(", path, font-family);

  @if $value == path {

    .rs-button {
      > .label {
        background-image: $icon;
        width: 24px;
        height: 24px;
      }
    }

  } @else {
    $font-family: '"' + $icon + '"';
    $name: '"' + "\\"+ $codepoint + '"';

    .rs-button {
      > .label::before {
        font-family: $font-family;
        content: $name;
        display: inline-block;
        vertical-align: middle;
      }
      
      > .label::after {
        font-family: $font-family;
        content: $name;
        vertical-align: middle;
        display: none;
      }
    }
  }
}

@mixin rs-button-icon-position($position: left) {
  @if $position == left {

     .rs-button {
      
      > .label::before {
        display: inline-block;
      }

      > .label::after {
        display: none;
      }
    }
    
  } @else if $position == right {
    
    .rs-button {
      
      > .label::before {
        display: none;
      }

      > .label::after {
        display: inline-block;
      }
    }
  }
}

@mixin rs-button-filled-accessible($container-fill-color) {
  $fill-tone: rs-theme-tone($container-fill-color);
  @include rs-button-container-fill-color($container-fill-color);

  @if ($fill-tone == "dark") {
    @include rs-button-ink-color(rs-theme-ink-color-for-fill_(primary, dark));
    @include rs-ripple-upgraded(text-primary-on-dark);
  } @else {
    @include rs-button-ink-color(rs-theme-ink-color-for-fill_(primary, light));
    @include rs-ripple-upgraded(text-primary-on-light);

  }
}

@mixin rs-button-shape-radius($radius) {
  .rs-button {
    border-radius: $radius;
  }
}

@mixin rs-button-horizontal-padding($padding) {
  .rs-button {
    padding: 0 $padding 0 $padding;
  }
}

@mixin rs-button-outline-width($outline-width, $padding: $rs-button-contained-horizontal-padding) {
  $padding-value: max($padding - $outline-width, 0);

  @include rs-button-horizontal-padding($padding-value);
  .rs-button {
    border-width: $outline-width;
  }
}

@mixin rs-button-outline-width($outline-width, $padding: $rs-button-contained-horizontal-padding) {
  $padding-value: max($padding - $outline-width, 0);

  @include rs-button-horizontal-padding($padding-value);
  .rs-button {
    border-width: $outline-width;
  }
}

@mixin rs-button-container-fill-color($color) {
  .rs-button {
    &:not(.-disabled) {
      background-color: $color;
    }
  }
}

@mixin rs-button-outline-color($color) {
  .rs-button {
    &:not(.-disabled) {
      border-color: $color;
    }
  }
}

@mixin rs-button-icon-color($color) {
  .rs-button:not(.-disabled) {
    > .label::before {
      color: $color;
    }
    > .label::after {
      color: $color;
    }
  }
}

@mixin rs-button-ink-color($color) {
  .rs-button {
    &:not(.-disabled) {
     color: $color;
    }
  }
}

@mixin rs-button-states-color($color) {
  .rs-button {
    @include rs-ripple-upgraded($color);
  }
}