@import "@rsmdc/rtl/mixins";
@import "@rsmdc/theme/mixins";
@import "./variables";

@mixin rs-floating-label-ink-color($color) {
  @include rs-theme-prop(color, $color);
}

// Used for textarea in case of scrolling
@mixin rs-floating-label-fill-color($color) {
  @include rs-theme-prop(background-color, $color);
}

@mixin rs-form-label-float-shake-keyframes($modifier, $positionY, $positionX: 0%, $scale: .75) {
  @keyframes rs-form-label-shake-float-above-#{$modifier} {
    0% {
      transform: translateX(calc(0 - #{$positionX})) translateY(-#{$positionY}) scale(#{$scale});
    }

    33% {
      animation-timing-function: cubic-bezier(.5, 0, .701732, .495819);
      transform: translateX(calc(4% - #{$positionX})) translateY(-#{$positionY}) scale(#{$scale});
    }

    66% {
      animation-timing-function: cubic-bezier(.302435, .381352, .55, .956352);
      transform: translateX(calc(-4% - #{$positionX})) translateY(-#{$positionY}) scale(#{$scale});
    }

    100% {
      transform: translateX(calc(0 - #{$positionX})) translateY(-#{$positionY}) scale(#{$scale});
    }
  }
}

// todo: replace function rs-form-label-float-position and rs-form-label-float-rtl-position
@mixin rs-floating-label-float-position($positionY, $positionX: 0%, $scale: .75) {
  .rs-floating-label--float-above {
    @if $positionX > 0 or $positionX < 0 {
      transform: translateY(-1 * $positionY) translateX(-1 * $positionX) scale($scale);

      @include rs-rtl {
        transform: translateY(-1 * $positionY) translateX($positionX) scale($scale);
      }
    } @else {
      transform: translateY(-1 * $positionY) scale($scale);
    }
  }
}

// todo replace @function rs-form-label-float-shake-animation($modifier)
@mixin rs-floating-label-shake-animation($modifier) {
  .rs-floating-label--shake {
    animation: rs-form-label-shake-float-above-#{$modifier} 250ms 1;
  }
}

@mixin rs-floating-label-max-width($max-width) {
  max-width: $max-width;
}
