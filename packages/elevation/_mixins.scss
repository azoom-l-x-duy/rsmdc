//
// Copyright 2017 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@import "@rsmdc/theme/variables";
@import "./variables";

@mixin rs-elevation-core-styles() {
  @for $z-value from 0 through 24 {
    .rs-elevation--z#{$z-value} {
      // @include rs-elevation($z-value);
    }
  }

  .rs-elevation-transition {
    transition: rs-elevation-transition-value();
    will-change: $rs-elevation-property;
  }
}

// Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
// The $z-value must be between 0 and 24.
// If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
// $opacity-boost.
@function rs-elevation($z-value, $color: $rs-elevation-baseline-color, $opacity-boost: 0) {
  @if type-of($z-value) != number or not unitless($z-value) {
    @error "$z-value must be a unitless number, but received '#{$z-value}'";
  }

  @if $z-value < 0 or $z-value > 24 {
    @error "$z-value must be between 0 and 24, but received '#{$z-value}'";
  }

  $color: rs-theme-prop-value($color);

  $umbra-z-value: map-get($rs-elevation-umbra-map, $z-value);
  $penumbra-z-value: map-get($rs-elevation-penumbra-map, $z-value);
  $ambient-z-value: map-get($rs-elevation-ambient-map, $z-value);

  $umbra-color: rgba($color, $rs-elevation-umbra-opacity + $opacity-boost);
  $penumbra-color: rgba($color, $rs-elevation-penumbra-opacity + $opacity-boost);
  $ambient-color: rgba($color, $rs-elevation-ambient-opacity + $opacity-boost);

  @return #{"#{$umbra-z-value} #{$umbra-color}"}, #{"#{$penumbra-z-value} #{$penumbra-color}"}, #{$ambient-z-value} $ambient-color;
}

// Returns a string that can be used as the value for a `transition` property for elevation.
// Calling this function directly is useful in situations where a component needs to transition
// more than one property.
//
// ```scss
// .foo {
//   transition: rs-elevation-transition-value(), opacity 100ms ease;
//   will-change: $rs-elevation-property, opacity;
// }
// ```
@function rs-elevation-transition-value(
  $duration: $rs-elevation-transition-duration,
  $easing: $rs-elevation-transition-timing-function
) {
  @return #{$rs-elevation-property} #{$duration} #{$easing};
}
