@import "@rsmdc/floating-label/rs-functions";
@import "@rsmdc/ripple/mixins";
@import "@rsmdc/shape/mixins";
@import "@rsmdc/shape/functions";
@import "@rsmdc/theme/mixins";
@import "@rsmdc/notchd-outline/variables";
@import "./variables";

@mixin rs-states-base-color($color) {
  @if alpha(rs-theme-prop-value($color)) > 0 {
    $background-color: rs-theme-prop-value($color);
    
    &::before,
    &::after {
      background-color: $background-color;
      content: '';
    }  
  } @else {
    &::before,
    &::after {
      content: none;
    }  
  }
}

@mixin rs-select-type($type) {
  @if $type == outlined {
    @include rs-select-outline-shape-radius(medium);
    @include rs-states-base-color(transparent);
    // @include rs-notched-outline-floating-label-float-position($rs-select-outlined-label-position-y, 0);

    .rs-select {
      border: none;
      overflow: visible;

      &:not(.-disabled) {
        background-color: transparent;

        > .outline {
          > .leading,
          > .notch,
          > .trailing {
            opacity: .24;
            border-color: $rs-select-outlined-idle-border;
          }
        }
      }

      &:not(.-disabled):not(.-focused)  {
        > .nativecontrol:hover ~,
        > .selectedtext:hover ~ {
          .outline {
            opacity: .24;
            border-color: $rs-select-outlined-hover-border;
          }
        }
      }

      &:not(.-disabled).-focused > .outline {
        > .leading,
        > .notch,
        > .trailing {
          opacity: .24;
          border-color: $rs-theme-primary;
        }
      }

      > .label,
      > .outline > .notch > .label.-outlined {
        line-height: 1.15rem;
        pointer-events: auto;
      }

      > .label.-shake,
      > .outline > .notch > .label.-outlined.-shake {
        animation: rs-floating-label-shake-animation(text-field-outlined);
      }
              
      > .nativecontrol,
      > .selectedtext {
        @include rs-rtl-reflexive-property(padding, $rs-select-label-padding, $rs-select-arrow-padding);
    
        display: flex;
        padding-top: 12px;
        padding-bottom: 12px;
        border: none;
        background-color: transparent;
        z-index: 1;
      }
    
      > .selectedtext {
        padding-top: 14px;
      }
    
      > .icon {
        z-index: 2;
      }
    
  
      &.-invalid {
        &:not(.-disabled) > .outline {
          > .leading,
          > .notch,
          > .trailing {
            opacity: .24;
            border-color: $rs-select-error-color;
          }
        }

        &:not(.-disabled):not(.-focused) {
          > .nativecontrol:hover ~,
          > .selectedtext:hover ~ {
            .outline {
              opacity: .24;
              border-color: $rs-select-error-color;
            }
          }
        }

        &:not(.-disabled).-focused > .outline {
          > .leading,
          > .notch,
          > .trailing {
            opacity: .24;
            border-color: $rs-select-error-color;
          }
        }
      }
    
      &.-disabled {
        background-color: transparent;
    
        > .nativecontrol,
        > .selectedtext {
          border-bottom-style: none;
        }

        > .outline {
          > .leading,
          > .notch,
          > .trailing {
            opacity: .24;
            border-color: $rs-select-outlined-disabled-border;
          }
        }
      }
    
      &.-icon {
        // @include rs-notched-outline-floating-label-float-position($rs-select-outlined-label-position-y, $rs-select-outlined-with-leading-icon-label-position-x);
        > .label,
        > .outline > .notch > .label.-outlined.-shake {
          animation: rs-floating-label-shake-animation(select-outlined-leading-icon);
        }
      }
    }
  }
}

@mixin rs-select-icon-color($color) {
  .rs-select {
    &.-icon:not(.-disabled) > .icon {
      color: $color;
    }
  }
}

@mixin rs-select-focused-outline-color($color) {
  .rs-select:not(.-disabled).-focused > .outline {
    > .leading,
    > .notch,
    > .trailing {
      opacity: .24;
      border-color: $color;
    }
  }
}

@mixin rs-select-ink-color($color) {
  .rs-select {
    &:not(.-disabled) {
      > .nativecontrol,
      > .selectedtext {
        color: $color;
      }
    }
  }
}

@mixin rs-select-container-fill-color($color) {
  .rs-select {
    &:not(.-disabled) {
      background-color: $color;
    }
  }
}

@mixin rs-select-focused-label-color($color) {
  .rs-select {
    &:not(.-disabled).-focused {
      > .label,
      > .outline > .notch > .label.-outlined {
        color: $color;
      }
    }
  }
}

@mixin rs-select-hover-bottom-line-color($color) {
  .rs-select {
    &:not(.-disabled) > .nativecontrol:hover {
      border-bottom-color: $color;
    }
  }
}

@mixin rs-select-bottom-line-color($color) {
  .rs-select {
    &:not(.-disabled) {
      > .nativecontrol,
      > .selectedtext {
        border-bottom-color: $color;
      }
    }
  }
}

@mixin rs-select-focused-bottom-line-color($color) {
  .rs-select {
    &:not(.-disabled).-focused > .ripple {
      background-color: $color;
    }
  }
}

@mixin rs-select-label-color($color) {
  .rs-select:not(.-disabled) {
    > .label,
    > .outline > .notch > .label.-outlined {
      color: $color;
    }
  }
}

@mixin rs-select-outline-color($color) {

  .rs-select:not(.-disabled) > .outline {
    > .leading,
    > .notch,
    > .trailing {
      opacity: .24;
      border-color: $color;
    }
  }
}

@mixin rs-select-hover-outline-color($color) {
  .rs-select:not(.-disabled):not(.-focused) {
    > .nativecontrol:hover ~,
    > .selectedtext:hover ~ {
      .outline {
        opacity: .24;
        border-color: $color;
      }
    }
  }
}

@mixin rs-select-shape-radius($radius, $rtl-reflexive: false) {
  @if length($radius) > 2 {
    @error "Invalid radius: '#{$radius}' component doesn't allow customizing all corners";
  }

  .rs-select,
  .rs-select > .nativecontrol {
    $masked-radius: rs-shape-mask-radius($radius, 1 1 0 0);

    border-radius: rs-shape-resolve-percentage-radius(rs-select-height, $masked-radius);
  }
}

@mixin rs-select-outline-shape-radius($radius, $rtl-reflexive: false) {
  .rs-select > .outline {
    $resolved-radius: rs-shape-resolve-percentage-radius($rs-select-height, $radius);
    $rad: rs-shape-prop-value($resolved-radius);

    > .leading {
      border-radius: rs-shape-mask-radius($rad, 1 0 0 1);
    }

    > .notch > .label.-outlined {
      left: calc( 4px + #{$rad} );
    }

    > .trailing {
      border-radius: rs-shape-mask-radius($rad, 0 1 1 0);
    }

    @if ($rad > $rs-notched-outline-leading-width) {
      .rs-select > .outline > .leading {
        width: $rad;
      }
    }
  }

  > .nativecontrol {
    $resolved-radius: rs-shape-resolve-percentage-radius($rs-select-height, $radius);

    border-radius: rs-shape-radius($resolved-radius);
  }
}
