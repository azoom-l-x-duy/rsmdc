//
// Copyright 2016 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@import "@rsmdc/animation/functions";
@import "@rsmdc/ripple/mixins";
@import "@rsmdc/rtl/mixins";
@import "./functions";
@import "./keyframes";
@import "./variables";

//
// Public
//

@mixin rs-checkbox-core-styles() {
  @include rs-checkbox-without-ripple;
  @include rs-checkbox-ripple;
}

@mixin rs-checkbox-without-ripple() {
  @include rs-checkbox-mark-keyframes_;

  .rs-checkbox {
    @include rs-checkbox-base_;
  }

  @include rs-checkbox-container-colors();
  @include rs-checkbox-ink-color($rs-checkbox-mark-color);
  @include rs-checkbox-focus-indicator-color($rs-checkbox-baseline-theme-color);

  @include rs-checkbox-disabled-container-color_;

  @media screen and (-ms-high-contrast: active) {
    .rs-checkbox__mixedmark {
      margin: 0 1px; // Extra horizontal space around mixedmark symbol.
    }
  }

  // Needed to disable hover effects on CSS-only (non-JS) checkboxes
  .rs-checkbox--disabled {
    @include rs-checkbox--disabled_;
  }

  .rs-checkbox__background {
    @include rs-checkbox__background_();
  }

  .rs-checkbox__checkmark {
    @include rs-checkbox__checkmark_();
  }

  .rs-checkbox__checkmark-path {
    @include rs-checkbox__checkmark-path_();
  }

  .rs-checkbox__mixedmark {
    @include rs-checkbox__mixedmark_();
  }

  // JS checkbox
  .rs-checkbox--upgraded {
    .rs-checkbox__background,
    .rs-checkbox__checkmark,
    .rs-checkbox__checkmark-path,
    .rs-checkbox__mixedmark {
      @include rs-checkbox__child--upgraded_;
    }
  }

  .rs-checkbox--anim {
    @include rs-checkbox--anim_;
  }

  .rs-checkbox__native-control:checked ~ .rs-checkbox__background,
  .rs-checkbox__native-control:indeterminate ~ .rs-checkbox__background {
    @include rs-checkbox__background--marked_;

    .rs-checkbox__checkmark-path {
      @include rs-checkbox__checkmark-path--marked_;
    }
  }

  // The frame's ::before element is used as a focus indicator for the checkbox
  .rs-checkbox__background::before {
    @include rs-checkbox__focus-indicator_();
  }

  .rs-checkbox__native-control:focus ~ .rs-checkbox__background::before {
    @include rs-checkbox__focus-indicator--focused_();
  }

  .rs-checkbox__native-control {
    @include rs-checkbox__native-control_;

    &:disabled {
      @include rs-checkbox--disabled_;
    }
  }

  .rs-checkbox__native-control:checked ~ .rs-checkbox__background {
    .rs-checkbox__checkmark {
      @include rs-checkbox__checkmark--checked_();
    }

    .rs-checkbox__mixedmark {
      @include rs-checkbox__mixedmark--checked_;
    }
  }

  .rs-checkbox__native-control:indeterminate ~ .rs-checkbox__background {
    .rs-checkbox__checkmark {
      @include rs-checkbox__checkmark--indeterminate_();
    }

    .rs-checkbox__mixedmark {
      @include rs-checkbox__mixedmark--indeterminate_;
    }
  }

}

@mixin rs-checkbox-ripple() {
  @include rs-ripple-common();

  .rs-checkbox {
    @include rs-ripple-surface;
    @include rs-states($rs-checkbox-baseline-theme-color);
    @include rs-ripple-radius-unbounded;
  }

  .rs-ripple-upgraded--background-focused .rs-checkbox__background::before {
    content: none;
  }
}

@mixin rs-checkbox-container-colors(
  $unmarked-stroke-color: $rs-checkbox-border-color,
  $unmarked-fill-color: transparent,
  $marked-stroke-color: $rs-checkbox-baseline-theme-color,
  $marked-fill-color: $rs-checkbox-baseline-theme-color,
  $generate-keyframes: true
) {

  @include rs-checkbox-unmarked-background-selector-enabled_ {
    @include rs-theme-prop(border-color, $unmarked-stroke-color);
    @include rs-theme-prop(background-color, $unmarked-fill-color);
  }

  @include rs-checkbox-marked-background-selector-enabled_ {
    @include rs-theme-prop(border-color, $marked-stroke-color);
    @include rs-theme-prop(background-color, $marked-fill-color);
  }

  @if $generate-keyframes {
    $uid: rs-checkbox-container-keyframes-uid_();
    $anim-selector: if(&, "&.rs-checkbox--anim", ".rs-checkbox--anim");

    @include rs-checkbox-container-keyframes_(
      $from-stroke-color: $unmarked-stroke-color,
      $to-stroke-color: $marked-stroke-color,
      $from-fill-color: $unmarked-fill-color,
      $to-fill-color: $marked-fill-color,
      $uid: $uid
    );

    #{$anim-selector} {
      &-unchecked-checked,
      &-unchecked-indeterminate {
        .rs-checkbox__native-control:enabled ~ .rs-checkbox__background {
          animation-name: rs-checkbox-fade-in-background-#{$uid};
        }
      }

      &-checked-unchecked,
      &-indeterminate-unchecked {
        .rs-checkbox__native-control:enabled ~ .rs-checkbox__background {
          animation-name: rs-checkbox-fade-out-background-#{$uid};
        }
      }
    }
  }
}

@mixin rs-checkbox-ink-color($color) {

  .rs-checkbox__checkmark {
    @include rs-theme-prop(color, $color);
  }

  .rs-checkbox__mixedmark {
    @include rs-theme-prop(border-color, $color);
  }
}

@mixin rs-checkbox-focus-indicator-color($color) {

  // The ::before element is used as a focus indicator for the checkbox
  .rs-checkbox__background::before {
    @include rs-theme-prop(background-color, $color, $edgeOptOut: true);
  }
}

//
// Private
//

@mixin rs-checkbox-base_ {
  display: inline-block;
  position: relative;
  flex: 0 0 $rs-checkbox-size;
  box-sizing: content-box;
  width: $rs-checkbox-size;
  height: $rs-checkbox-size;
  padding: ($rs-checkbox-touch-area - $rs-checkbox-size) / 2;
  line-height: 0;
  white-space: nowrap;
  cursor: pointer;
  vertical-align: bottom;
}

@mixin rs-checkbox-disabled-container-color_ {
  @include rs-checkbox-unmarked-background-selector-disabled_ {
    @include rs-theme-prop(border-color, $rs-checkbox-disabled-color);
  }

  @include rs-checkbox-marked-background-selector-disabled_ {
    @include rs-theme-prop(border-color, transparent);
    @include rs-theme-prop(background-color, $rs-checkbox-disabled-color);
  }
}

@mixin rs-checkbox--disabled_ {
  cursor: default;
  pointer-events: none;
}

@mixin rs-checkbox__child--cover-parent_ {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@mixin rs-checkbox__child--upgraded_ {
  // Due to the myriad of selector combos used to properly style a CSS-only checkbox, all of
  // which have varying selector precedence and make use of transitions, it is cleaner and more
  // efficient here to simply use !important, since the rs-checkbox--anim-* classes will take
  // over from here.
  transition: none !important;
}

// Animation

@mixin rs-checkbox--anim_ {
  $rs-checkbox-indeterminate-change-duration_: 500ms;

  // stylelint-disable selector-max-type

  &-unchecked-checked,
  &-unchecked-indeterminate,
  &-checked-unchecked,
  &-indeterminate-unchecked {
    .rs-checkbox__background {
      animation-duration: $rs-checkbox-transition-duration * 2;
      animation-timing-function: linear;
    }
  }

  &-unchecked-checked {
    .rs-checkbox__checkmark-path {
      // Instead of delaying the animation, we simply multiply its length by 2 and begin the
      // animation at 50% in order to prevent a flash of styles applied to a checked checkmark
      // as the background is fading in before the animation begins.
      animation: rs-checkbox-unchecked-checked-checkmark-path $rs-checkbox-transition-duration * 2 linear 0s;
      transition: none;
    }
  }

  &-unchecked-indeterminate {
    .rs-checkbox__mixedmark {
      animation: rs-checkbox-unchecked-indeterminate-mixedmark $rs-checkbox-transition-duration linear 0s;
      transition: none;
    }
  }

  &-checked-unchecked {
    .rs-checkbox__checkmark-path {
      animation: rs-checkbox-checked-unchecked-checkmark-path $rs-checkbox-transition-duration linear 0s;
      transition: none;
    }
  }

  &-checked-indeterminate {
    .rs-checkbox__checkmark {
      animation: rs-checkbox-checked-indeterminate-checkmark $rs-checkbox-transition-duration linear 0s;
      transition: none;
    }

    .rs-checkbox__mixedmark {
      animation: rs-checkbox-checked-indeterminate-mixedmark $rs-checkbox-transition-duration linear 0s;
      transition: none;
    }
  }

  &-indeterminate-checked {
    .rs-checkbox__checkmark {
      animation: rs-checkbox-indeterminate-checked-checkmark $rs-checkbox-indeterminate-change-duration_ linear 0s;
      transition: none;
    }

    .rs-checkbox__mixedmark {
      animation: rs-checkbox-indeterminate-checked-mixedmark $rs-checkbox-indeterminate-change-duration_ linear 0s;
      transition: none;
    }
  }

  &-indeterminate-unchecked {
    .rs-checkbox__mixedmark {
      // stylelint-disable-next-line declaration-colon-space-after
      animation:
        rs-checkbox-indeterminate-unchecked-mixedmark $rs-checkbox-indeterminate-change-duration_ * .6 linear 0s;
      transition: none;
    }
  }

  // stylelint-enable selector-max-type
}

// Background

@mixin rs-checkbox-unmarked-background-selector-enabled_ {
  // stylelint-disable-next-line selector-max-specificity
  .rs-checkbox__native-control:enabled:not(:checked):not(:indeterminate) ~ .rs-checkbox__background {
    @content;
  }
}

@mixin rs-checkbox-unmarked-background-selector-disabled_ {
  // stylelint-disable-next-line selector-max-specificity
  .rs-checkbox__native-control:disabled:not(:checked):not(:indeterminate) ~ .rs-checkbox__background {
    @content;
  }
}

@mixin rs-checkbox-marked-background-selector-enabled_ {
  .rs-checkbox__native-control:enabled:checked ~ .rs-checkbox__background,
  .rs-checkbox__native-control:enabled:indeterminate ~ .rs-checkbox__background {
    @content;
  }
}

@mixin rs-checkbox-marked-background-selector-disabled_ {
  .rs-checkbox__native-control:disabled:checked ~ .rs-checkbox__background,
  .rs-checkbox__native-control:disabled:indeterminate ~ .rs-checkbox__background {
    @content;
  }
}

@mixin rs-checkbox__background_() {
  @include rs-rtl-reflexive-position(left, ($rs-checkbox-touch-area - $rs-checkbox-size) / 2, ".rs-checkbox");

  display: inline-flex;
  position: absolute;
  top: ($rs-checkbox-touch-area - $rs-checkbox-size) / 2;
  bottom: 0;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  width: $rs-checkbox-ui-pct;
  height: $rs-checkbox-ui-pct;
  // border-color is overridden by the rs-checkbox-unmarked-stroke-color() mixin
  border: $rs-checkbox-border-width solid currentColor;
  border-radius: 2px;
  background-color: transparent;
  pointer-events: none;
  will-change: background-color, border-color;

  transition:
    rs-checkbox-transition-exit(background-color),
    rs-checkbox-transition-exit(border-color);
}

@mixin rs-checkbox__background--marked_ {
  transition:
    rs-checkbox-transition-enter(border-color),
    rs-checkbox-transition-enter(background-color);
}

// Focus indicator

@mixin rs-checkbox__focus-indicator_(: rs-feature-all()) {
  @include rs-checkbox__child--cover-parent_;

  width: 100%;
  height: 100%;
  transform: scale(0, 0);
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
  will-change: opacity, transform;

  transition:
    rs-checkbox-transition-exit(opacity),
    rs-checkbox-transition-exit(transform);
}

@mixin rs-checkbox__focus-indicator--focused_() {
  transform: scale(2.75, 2.75);
  opacity: $rs-checkbox-focus-indicator-opacity;

  transition:
    rs-checkbox-transition-enter(opacity, 0ms, 80ms),
    rs-checkbox-transition-enter(transform, 0ms, 80ms);
}

// Native input

@mixin rs-checkbox__native-control_ {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  opacity: 0;
  cursor: inherit;
}

// Check mark

@mixin rs-checkbox__checkmark_() {
  @include rs-checkbox__child--cover-parent_;

  width: 100%;
  opacity: 0;

  transition: rs-checkbox-transition-exit(opacity, 0ms, $rs-checkbox-transition-duration * 2);

  .rs-checkbox--upgraded & {
    opacity: 1;
  }
}

@mixin rs-checkbox__checkmark--checked_(: rs-feature-all()) {
  transition:
    rs-checkbox-transition-enter(opacity, 0ms, $rs-checkbox-transition-duration * 2),
    rs-checkbox-transition-enter(transform, 0ms, $rs-checkbox-transition-duration * 2);

  opacity: 1;
}

@mixin rs-checkbox__checkmark--indeterminate_(: rs-feature-all()) {
  transform: rotate(45deg);
  opacity: 0;
  transition:
    rs-checkbox-transition-exit(opacity, 0ms, $rs-checkbox-transition-duration),
    rs-checkbox-transition-exit(transform, 0ms, $rs-checkbox-transition-duration);
}

// Check mark path

@mixin rs-checkbox__checkmark-path_(: rs-feature-all()) {
  transition: rs-checkbox-transition-exit(stroke-dashoffset, 0ms, $rs-checkbox-transition-duration * 2);
  stroke: currentColor;
  stroke-width: $rs-checkbox-mark-stroke-size * 1.3;
  stroke-dashoffset: $rs-checkbox-mark-path-length_;
  stroke-dasharray: $rs-checkbox-mark-path-length_;
}

@mixin rs-checkbox__checkmark-path--marked_ {
  stroke-dashoffset: 0;
}

// Mixed mark

@mixin rs-checkbox__mixedmark_() {
  width: 100%;
  height: 0;
  transform: scaleX(0) rotate(0deg);
  border-width: floor($rs-checkbox-mark-stroke-size) / 2;
  border-style: solid;
  opacity: 0;
  transition:
    rs-checkbox-transition-exit(opacity),
    rs-checkbox-transition-exit(transform);
}

@mixin rs-checkbox__mixedmark--checked_ {
  transform: scaleX(1) rotate(-45deg);
}

@mixin rs-checkbox__mixedmark--indeterminate_ {
  transform: scaleX(1) rotate(0deg);
  opacity: 1;
}
