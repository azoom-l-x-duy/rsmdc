var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
System.register(['./p-89bdd8dd.system.js', '@rsmdc/menu-surface/constants', '@rsmdc/list/index', '@rsmdc/menu-surface/foundation', '@rsmdc/menu-surface/index', '@rsmdc/list/foundation'], function (exports) {
    'use strict';
    var registerInstance, h, Host, getElement, RSListFoundation$1, RSList, RSMenuSurfaceFoundation, RSMenuSurface, RSListFoundation;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                h = module.h;
                Host = module.H;
                getElement = module.g;
            }, function () { }, function (module) {
                RSListFoundation$1 = module.RSListFoundation;
                RSList = module.RSList;
            }, function (module) {
                RSMenuSurfaceFoundation = module.RSMenuSurfaceFoundation;
            }, function (module) {
                RSMenuSurface = module.RSMenuSurface;
            }, function (module) {
                RSListFoundation = module.RSListFoundation;
            }],
        execute: function () {
            /*! *****************************************************************************
            Copyright (c) Microsoft Corporation. All rights reserved.
            Licensed under the Apache License, Version 2.0 (the "License"); you may not use
            this file except in compliance with the License. You may obtain a copy of the
            License at http://www.apache.org/licenses/LICENSE-2.0

            THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
            KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
            WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
            MERCHANTABLITY OR NON-INFRINGEMENT.

            See the Apache Version 2.0 License for specific language governing permissions
            and limitations under the License.
            ***************************************************************************** */
            /* global Reflect, Promise */
            var extendStatics = function (d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b)
                        if (b.hasOwnProperty(p))
                            d[p] = b[p]; };
                return extendStatics(d, b);
            };
            function __extends(d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }
            var __assign = function () {
                __assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s)
                            if (Object.prototype.hasOwnProperty.call(s, p))
                                t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };
            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m)
                    return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                        ar.push(r.value);
                }
                catch (error) {
                    e = { error: error };
                }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"]))
                            m.call(i);
                    }
                    finally {
                        if (e)
                            throw e.error;
                    }
                }
                return ar;
            }
            function __spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                return ar;
            }
            /**
             * @license
             * Copyright 2016 Google Inc.
             *
             * Permission is hereby granted, free of charge, to any person obtaining a copy
             * of this software and associated documentation files (the "Software"), to deal
             * in the Software without restriction, including without limitation the rights
             * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             * copies of the Software, and to permit persons to whom the Software is
             * furnished to do so, subject to the following conditions:
             *
             * The above copyright notice and this permission notice shall be included in
             * all copies or substantial portions of the Software.
             *
             * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             * THE SOFTWARE.
             */
            var RSFoundation = /** @class */ (function () {
                function RSFoundation(adapter) {
                    if (adapter === void 0) {
                        adapter = {};
                    }
                    this.adapter_ = adapter;
                }
                Object.defineProperty(RSFoundation, "cssClasses", {
                    get: function () {
                        // Classes extending RSFoundation should implement this method to return an object which exports every
                        // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RSFoundation, "strings", {
                    get: function () {
                        // Classes extending RSFoundation should implement this method to return an object which exports all
                        // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RSFoundation, "numbers", {
                    get: function () {
                        // Classes extending RSFoundation should implement this method to return an object which exports all
                        // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RSFoundation, "defaultAdapter", {
                    get: function () {
                        // Classes extending RSFoundation may choose to implement this getter in order to provide a convenient
                        // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
                        // validation.
                        return {};
                    },
                    enumerable: true,
                    configurable: true
                });
                RSFoundation.prototype.init = function () {
                    // Subclasses should override this method to perform initialization routines (registering events, etc.)
                };
                RSFoundation.prototype.destroy = function () {
                    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
                };
                return RSFoundation;
            }());
            /**
             * @license
             * Copyright 2016 Google Inc.
             *
             * Permission is hereby granted, free of charge, to any person obtaining a copy
             * of this software and associated documentation files (the "Software"), to deal
             * in the Software without restriction, including without limitation the rights
             * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             * copies of the Software, and to permit persons to whom the Software is
             * furnished to do so, subject to the following conditions:
             *
             * The above copyright notice and this permission notice shall be included in
             * all copies or substantial portions of the Software.
             *
             * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             * THE SOFTWARE.
             */
            var RSComponent = /** @class */ (function () {
                function RSComponent(root, foundation) {
                    var args = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        args[_i - 2] = arguments[_i];
                    }
                    this.root_ = root;
                    this.initialize.apply(this, __spread(args));
                    // Note that we initialize foundation here and not within the constructor's default param so that
                    // this.root_ is defined and can be used within the foundation class.
                    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
                    this.foundation_.init();
                    this.initialSyncWithDOM();
                }
                RSComponent.attachTo = function (root) {
                    // Subclasses which extend RSBase should provide an attachTo() method that takes a root element and
                    // returns an instantiated component with its root set to that element. Also note that in the cases of
                    // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
                    // from getDefaultFoundation().
                    return new RSComponent(root, new RSFoundation({}));
                };
                /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */
                RSComponent.prototype.initialize = function () {
                    var _args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        _args[_i] = arguments[_i];
                    }
                    // Subclasses can override this to do any additional setup work that would be considered part of a
                    // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
                    // initialized. Any additional arguments besides root and foundation will be passed in here.
                };
                RSComponent.prototype.getDefaultFoundation = function () {
                    // Subclasses must override this method to return a properly configured foundation class for the
                    // component.
                    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +
                        'foundation class');
                };
                RSComponent.prototype.initialSyncWithDOM = function () {
                    // Subclasses should override this method if they need to perform work to synchronize with a host DOM
                    // object. An example of this would be a form control wrapper that needs to synchronize its internal state
                    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
                    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
                };
                RSComponent.prototype.destroy = function () {
                    // Subclasses may implement this method to release any resources / deregister any listeners they have
                    // attached. An example of this might be deregistering a resize event from the window object.
                    this.foundation_.destroy();
                };
                RSComponent.prototype.listen = function (evtType, handler) {
                    this.root_.addEventListener(evtType, handler);
                };
                RSComponent.prototype.unlisten = function (evtType, handler) {
                    this.root_.removeEventListener(evtType, handler);
                };
                /**
                 * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
                 */
                RSComponent.prototype.emit = function (evtType, evtData, shouldBubble) {
                    if (shouldBubble === void 0) {
                        shouldBubble = false;
                    }
                    var evt;
                    if (typeof CustomEvent === 'function') {
                        evt = new CustomEvent(evtType, {
                            bubbles: shouldBubble,
                            detail: evtData,
                        });
                    }
                    else {
                        evt = document.createEvent('CustomEvent');
                        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
                    }
                    this.root_.dispatchEvent(evt);
                };
                return RSComponent;
            }());
            /**
             * @license
             * Copyright 2018 Google Inc.
             *
             * Permission is hereby granted, free of charge, to any person obtaining a copy
             * of this software and associated documentation files (the "Software"), to deal
             * in the Software without restriction, including without limitation the rights
             * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             * copies of the Software, and to permit persons to whom the Software is
             * furnished to do so, subject to the following conditions:
             *
             * The above copyright notice and this permission notice shall be included in
             * all copies or substantial portions of the Software.
             *
             * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             * THE SOFTWARE.
             */
            var cssClasses = {
                MENU_SELECTED_LIST_ITEM: '-selected',
                MENU_SELECTION_GROUP: 'selectiongroup',
                ROOT: 'rs-menu',
            };
            var strings = {
                ARIA_SELECTED_ATTR: 'aria-selected',
                CHECKBOX_SELECTOR: 'input[type="checkbox"]',
                LIST_SELECTOR: '.rs-list',
                SELECTED_EVENT: 'rsMenu:selected',
            };
            /**
             * @license
             * Copyright 2018 Google Inc.
             *
             * Permission is hereby granted, free of charge, to any person obtaining a copy
             * of this software and associated documentation files (the "Software"), to deal
             * in the Software without restriction, including without limitation the rights
             * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             * copies of the Software, and to permit persons to whom the Software is
             * furnished to do so, subject to the following conditions:
             *
             * The above copyright notice and this permission notice shall be included in
             * all copies or substantial portions of the Software.
             *
             * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             * THE SOFTWARE.
             */
            var RSMenuFoundation = /** @class */ (function (_super) {
                __extends(RSMenuFoundation, _super);
                function RSMenuFoundation(adapter) {
                    var _this = _super.call(this, __assign({}, RSMenuFoundation.defaultAdapter, adapter)) || this;
                    _this.closeAnimationEndTimerId_ = 0;
                    return _this;
                }
                Object.defineProperty(RSMenuFoundation, "cssClasses", {
                    get: function () {
                        return cssClasses;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RSMenuFoundation, "strings", {
                    get: function () {
                        return strings;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RSMenuFoundation, "defaultAdapter", {
                    /**
                     * @see {@link RSMenuAdapter} for typing information on parameters and return types.
                     */
                    get: function () {
                        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                        return {
                            addClassToElementAtIndex: function () { return undefined; },
                            removeClassFromElementAtIndex: function () { return undefined; },
                            addAttributeToElementAtIndex: function () { return undefined; },
                            removeAttributeFromElementAtIndex: function () { return undefined; },
                            elementContainsClass: function () { return false; },
                            closeSurface: function () { return undefined; },
                            getElementIndex: function () { return -1; },
                            getParentElement: function () { return null; },
                            getSelectedElementIndex: function () { return -1; },
                            notifySelected: function () { return undefined; },
                        };
                        // tslint:enable:object-literal-sort-keys
                    },
                    enumerable: true,
                    configurable: true
                });
                RSMenuFoundation.prototype.destroy = function () {
                    if (this.closeAnimationEndTimerId_) {
                        clearTimeout(this.closeAnimationEndTimerId_);
                    }
                    this.adapter_.closeSurface();
                };
                RSMenuFoundation.prototype.handleKeydown = function (evt) {
                    var key = evt.key, keyCode = evt.keyCode;
                    var isTab = key === 'Tab' || keyCode === 9;
                    if (isTab) {
                        this.adapter_.closeSurface();
                    }
                };
                RSMenuFoundation.prototype.handleItemAction = function (listItem) {
                    var _this = this;
                    var index = this.adapter_.getElementIndex(listItem);
                    if (index < 0) {
                        return;
                    }
                    this.adapter_.notifySelected({ index: index });
                    this.adapter_.closeSurface();
                    // Wait for the menu to close before adding/removing classes that affect styles.
                    this.closeAnimationEndTimerId_ = setTimeout(function () {
                        var selectionGroup = _this.getSelectionGroup_(listItem);
                        if (selectionGroup) {
                            _this.handleSelectionGroup_(selectionGroup, index);
                        }
                    }, RSMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
                };
                /**
                 * Handles toggling the selected classes in a selection group when a selection is made.
                 */
                RSMenuFoundation.prototype.handleSelectionGroup_ = function (selectionGroup, index) {
                    // De-select the previous selection in this group.
                    var selectedIndex = this.adapter_.getSelectedElementIndex(selectionGroup);
                    if (selectedIndex >= 0) {
                        this.adapter_.removeAttributeFromElementAtIndex(selectedIndex, strings.ARIA_SELECTED_ATTR);
                        this.adapter_.removeClassFromElementAtIndex(selectedIndex, cssClasses.MENU_SELECTED_LIST_ITEM);
                    }
                    // Select the new list item in this group.
                    this.adapter_.addClassToElementAtIndex(index, cssClasses.MENU_SELECTED_LIST_ITEM);
                    this.adapter_.addAttributeToElementAtIndex(index, strings.ARIA_SELECTED_ATTR, 'true');
                };
                /**
                 * Returns the parent selection group of an element if one exists.
                 */
                RSMenuFoundation.prototype.getSelectionGroup_ = function (listItem) {
                    var parent = this.adapter_.getParentElement(listItem);
                    if (!parent) {
                        return null;
                    }
                    var isGroup = this.adapter_.elementContainsClass(parent, cssClasses.MENU_SELECTION_GROUP);
                    // Iterate through ancestors until we find the group or get to the list.
                    while (!isGroup && parent && !this.adapter_.elementContainsClass(parent, RSListFoundation.cssClasses.ROOT)) {
                        parent = this.adapter_.getParentElement(parent);
                        isGroup = parent ? this.adapter_.elementContainsClass(parent, cssClasses.MENU_SELECTION_GROUP) : false;
                    }
                    if (isGroup) {
                        return parent;
                    }
                    else {
                        return null;
                    }
                };
                return RSMenuFoundation;
            }(RSFoundation));
            /**
             * @license
             * Copyright 2018 Google Inc.
             *
             * Permission is hereby granted, free of charge, to any person obtaining a copy
             * of this software and associated documentation files (the "Software"), to deal
             * in the Software without restriction, including without limitation the rights
             * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             * copies of the Software, and to permit persons to whom the Software is
             * furnished to do so, subject to the following conditions:
             *
             * The above copyright notice and this permission notice shall be included in
             * all copies or substantial portions of the Software.
             *
             * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             * THE SOFTWARE.
             */
            var RSMenu = /** @class */ (function (_super) {
                __extends(RSMenu, _super);
                function RSMenu() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                RSMenu.attachTo = function (root) {
                    return new RSMenu(root);
                };
                RSMenu.prototype.initialize = function (menuSurfaceFactory, listFactory) {
                    if (menuSurfaceFactory === void 0) {
                        menuSurfaceFactory = function (el) { return new RSMenuSurface(el); };
                    }
                    if (listFactory === void 0) {
                        listFactory = function (el) { return new RSList(el); };
                    }
                    this.menuSurfaceFactory_ = menuSurfaceFactory;
                    this.listFactory_ = listFactory;
                };
                RSMenu.prototype.initialSyncWithDOM = function () {
                    var _this = this;
                    this.menuSurface_ = this.menuSurfaceFactory_(this.root_);
                    var list = this.root_.querySelector(strings.LIST_SELECTOR);
                    if (list) {
                        this.list_ = this.listFactory_(list);
                        this.list_.wrapFocus = true;
                    }
                    else {
                        this.list_ = null;
                    }
                    this.handleKeydown_ = function (evt) { return _this.foundation_.handleKeydown(evt); };
                    this.handleItemAction_ = function (evt) { return _this.foundation_.handleItemAction(_this.items[evt.detail.index]); };
                    this.afterOpenedCallback_ = function () { return _this.handleAfterOpened_(); };
                    this.menuSurface_.listen(RSMenuSurfaceFoundation.strings.OPENED_EVENT, this.afterOpenedCallback_);
                    this.listen('keydown', this.handleKeydown_);
                    this.listen(RSListFoundation$1.strings.ACTION_EVENT, this.handleItemAction_);
                };
                RSMenu.prototype.destroy = function () {
                    if (this.list_) {
                        this.list_.destroy();
                    }
                    this.menuSurface_.destroy();
                    this.menuSurface_.unlisten(RSMenuSurfaceFoundation.strings.OPENED_EVENT, this.afterOpenedCallback_);
                    this.unlisten('keydown', this.handleKeydown_);
                    this.unlisten(RSListFoundation$1.strings.ACTION_EVENT, this.handleItemAction_);
                    _super.prototype.destroy.call(this);
                };
                Object.defineProperty(RSMenu.prototype, "open", {
                    get: function () {
                        return this.menuSurface_.open;
                    },
                    set: function (value) {
                        this.menuSurface_.open = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RSMenu.prototype, "wrapFocus", {
                    get: function () {
                        return this.list_ ? this.list_.wrapFocus : false;
                    },
                    set: function (value) {
                        if (this.list_) {
                            this.list_.wrapFocus = value;
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RSMenu.prototype, "items", {
                    /**
                     * Return the items within the menu. Note that this only contains the set of elements within
                     * the items container that are proper list items, and not supplemental / presentational DOM
                     * elements.
                     */
                    get: function () {
                        return this.list_ ? this.list_.listElements : [];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RSMenu.prototype, "quickOpen", {
                    set: function (quickOpen) {
                        this.menuSurface_.quickOpen = quickOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @param corner Default anchor corner alignment of top-left menu corner.
                 */
                RSMenu.prototype.setAnchorCorner = function (corner) {
                    this.menuSurface_.setAnchorCorner(corner);
                };
                RSMenu.prototype.setAnchorMargin = function (margin) {
                    this.menuSurface_.setAnchorMargin(margin);
                };
                /**
                 * @return The item within the menu at the index specified.
                 */
                RSMenu.prototype.getOptionByIndex = function (index) {
                    var items = this.items;
                    if (index < items.length) {
                        return this.items[index];
                    }
                    else {
                        return null;
                    }
                };
                RSMenu.prototype.setFixedPosition = function (isFixed) {
                    this.menuSurface_.setFixedPosition(isFixed);
                };
                RSMenu.prototype.hoistMenuToBody = function () {
                    this.menuSurface_.hoistMenuToBody();
                };
                RSMenu.prototype.setIsHoisted = function (isHoisted) {
                    this.menuSurface_.setIsHoisted(isHoisted);
                };
                RSMenu.prototype.setAbsolutePosition = function (x, y) {
                    this.menuSurface_.setAbsolutePosition(x, y);
                };
                /**
                 * Sets the element that the menu-surface is anchored to.
                 */
                RSMenu.prototype.setAnchorElement = function (element) {
                    this.menuSurface_.anchorElement = element;
                };
                RSMenu.prototype.getDefaultFoundation = function () {
                    var _this = this;
                    // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<RSFooAdapter>.
                    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
                    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                    var adapter = {
                        addClassToElementAtIndex: function (index, className) {
                            var list = _this.items;
                            list[index].classList.add(className);
                        },
                        removeClassFromElementAtIndex: function (index, className) {
                            var list = _this.items;
                            list[index].classList.remove(className);
                        },
                        addAttributeToElementAtIndex: function (index, attr, value) {
                            var list = _this.items;
                            list[index].setAttribute(attr, value);
                        },
                        removeAttributeFromElementAtIndex: function (index, attr) {
                            var list = _this.items;
                            list[index].removeAttribute(attr);
                        },
                        elementContainsClass: function (element, className) { return element.classList.contains(className); },
                        closeSurface: function () { return _this.open = false; },
                        getElementIndex: function (element) { return _this.items.indexOf(element); },
                        getParentElement: function (element) { return element.parentElement; },
                        getSelectedElementIndex: function (selectionGroup) {
                            var selectedListItem = selectionGroup.querySelector("." + cssClasses.MENU_SELECTED_LIST_ITEM);
                            return selectedListItem ? _this.items.indexOf(selectedListItem) : -1;
                        },
                        notifySelected: function (evtData) {
                            return _this.emit(strings.SELECTED_EVENT, {
                                index: evtData.index,
                                item: _this.items[evtData.index],
                            });
                        },
                    };
                    // tslint:enable:object-literal-sort-keys
                    return new RSMenuFoundation(adapter);
                };
                RSMenu.prototype.handleAfterOpened_ = function () {
                    var list = this.items;
                    if (list.length > 0) {
                        list[0].focus();
                    }
                };
                return RSMenu;
            }(RSComponent));
            var Menu = exports('rs_menu', /** @class */ (function () {
                function class_1(hostRef) {
                    registerInstance(this, hostRef);
                }
                class_1.prototype.openeddHandler = function () {
                    this.isOpened();
                };
                class_1.prototype.isOpened = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if (this.opened) {
                                this.menu.classList.add("-opened");
                            }
                            else {
                                this.menu.classList.remove("-opened");
                            }
                            return [2 /*return*/];
                        });
                    });
                };
                class_1.prototype.componentDidLoad = function () {
                    this.menu = this.el.shadowRoot.querySelector('.rs-menu');
                    this.rsMenu = new RSMenu(this.menu);
                    this.rsMenu.setAbsolutePosition(100, 100);
                    this.isOpened();
                };
                class_1.prototype.render = function () {
                    return h(Host, null, h("div", { class: "rs-menu rs-menu-surface" }, h("slot", null)));
                };
                Object.defineProperty(class_1.prototype, "el", {
                    get: function () { return getElement(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(class_1, "watchers", {
                    get: function () {
                        return {
                            "opened": ["openeddHandler"]
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(class_1, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:rs-menu"; },
                    enumerable: true,
                    configurable: true
                });
                return class_1;
            }()));
        }
    };
});
