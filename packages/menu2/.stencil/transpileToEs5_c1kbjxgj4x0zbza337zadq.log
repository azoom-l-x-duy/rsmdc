var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
System.register(['./p-f177ddcb.system.js'], function (exports) {
    'use strict';
    var registerInstance, createEvent, h, Host, getElement;
    return {
        setters: [function (module) {
                registerInstance = module.r;
                createEvent = module.c;
                h = module.h;
                Host = module.H;
                getElement = module.g;
            }],
        execute: function () {
            var Menu = exports('rs_menu', /** @class */ (function () {
                function class_1(hostRef) {
                    registerInstance(this, hostRef);
                    this.change = createEvent(this, "change", 4);
                }
                class_1.prototype.openeddHandler = function () {
                    this.isOpened();
                };
                class_1.prototype.isOpened = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if (this.opened) {
                                this.menu.classList.add('-opened');
                            }
                            else {
                                this.menu.classList.remove("-opened");
                            }
                            return [2 /*return*/];
                        });
                    });
                };
                class_1.prototype.componentDidLoad = function () {
                    var _this = this;
                    this.menu = this.el.shadowRoot.querySelector('.rs-menu');
                    this.isOpened();
                    var list = Array.from(this.el.shadowRoot
                        .querySelector('slot')
                        .assignedElements())[0];
                    this.listItems = Array.from(list.shadowRoot
                        .querySelector('slot')
                        .assignedElements())
                        .filter(function (el) { return el.tagName === 'RS-LIST-ITEM'; });
                    this.listItems.forEach(function (item) {
                        item.addEventListener('click', function () {
                            var text = Array.from(item.shadowRoot
                                .querySelector('slot')
                                .assignedElements())
                                .find(function (el) { return el.tagName === 'RS-LIST-TEXT'; });
                            console.log(text);
                            if (!text)
                                return _this.change.emit();
                            _this.change.emit({ value: text.innerHTML });
                        });
                    });
                };
                class_1.prototype.componentDidUnLoad = function () {
                    var _this = this;
                    this.listItems.forEach(function (item) {
                        item.removeEventListener('click', function () {
                            var text = Array.from(item.shadowRoot
                                .querySelector('slot')
                                .assignedElements())
                                .find(function (el) { return el.tagName === 'RS-LIST-TEXT'; });
                            if (!text)
                                return _this.change.emit();
                            _this.change.emit({ value: text.innerHTML });
                        });
                    });
                };
                class_1.prototype.render = function () {
                    return h(Host, null, h("div", { class: "rs-menu rs-menu-surface" }, h("slot", null)));
                };
                Object.defineProperty(class_1.prototype, "el", {
                    get: function () { return getElement(this); },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(class_1, "watchers", {
                    get: function () {
                        return {
                            "opened": ["openeddHandler"]
                        };
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(class_1, "style", {
                    get: function () { return "STYLE_TEXT_PLACEHOLDER:rs-menu"; },
                    enumerable: true,
                    configurable: true
                });
                return class_1;
            }()));
        }
    };
});
